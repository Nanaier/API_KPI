openapi: '3.0.2'
info:
  title: Online Auction API
  version: '1.0'
servers:
  - url: https://api.server.online-auction/v1

tags:
  - name: lot
    description: Operations about lot
    
  - name: bids
    description: Operations about bids

  - name: favorites
    description: Operations about Favorites

  - name: balance
    description: Operations about Balance

  - name: notifications
    description: Operations about notifications    

paths:
   /auctioneer/{auctioneerId}/lots:
    get:
      tags:
        - lot
      summary: Returns all the lots that a specific auctioneer has created.
      description: Returns all the lots that the auctioneer has created.
      operationId: getAuctioneerLots
      parameters:
        - name: auctioneerId
          in: path
          description: id of auctioneer to get lots from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns all the lots that the auctioneer has created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lot'
        '400':
          description: Invalid auctioneerID.
    post: 
        tags:
        - lot
        summary: Create a new lot.
        description: Creates a new lot for a specified auctioneer.
        operationId: createAuctioneerLot
        parameters:
        - name: auctioneerId
          in: path
          description: id of auctioneer to create a lot to
          required: true
          schema:
            type: integer
            format: int64
        responses:
          '200':
            description: Creates a new lot for a specified auctioneer.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Lot'
          '400':
            description: Invalid auctioneerID.

# working with specific lot of a specific auctioneer
   /auctioneer/{auctioneerId}/lots/{lotId}:
    put:
      tags:
        - lot
      summary: Updates a specific lot of the specific auctioneer.
      description: Updates a specific lot by Id of the specific auctioneer.
      operationId: updateAuctioneerLot
      parameters:
        - name: auctioneerId
          in: path
          description: id of auctioneer whose lot should be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: lotId
          in: path
          description: id of lot which should be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lot'
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Lot'
        '400':
          description: Invalid ID supplied
        '404':
          description: Lot not found
    delete:
      tags:
        - lot
      summary: Deletes the auctioneer's lot
      description: Deletes the auctioneer's lot by Id
      operationId: deleteAuctioneerLot
      parameters:
        - name: auctioneerId
          in: path
          description: id of the auctioneer whose lot should be deleted
          required: true
          schema:
            type: integer
            format: int64
        - name: lotId
          in: path
          description: id of the lot which should be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull lot removal
        '400':
          description: Invalid ID supplied
        '404':
          description: Lot not found

# working with favorites
   /bidder/{bidderId}/favorites:
     get:
      tags:
        - favorites
      summary: Returns all the lots that have been added to Favorites of a specific bidder.
      description: Returns all the lots that have been added to Favorites of a specific bidder.
      operationId: getBidderFavoritesLots
      parameters:
        - name: bidderId
          in: path
          description: id of bidder to get favorite lots from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns all the lots that are in bidder's Favorites.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lot'
        '400':
          description: Invalid bidderID.
   
   /bidder/{bidderId}/favorites/{id}:
    post: 
      tags:
        - favorites
      summary: Add a lot to Favourites.
      description: Adds a lot to Favourites of a specific bidder.
      operationId: addBidderFavoritesLots
      parameters:
        - name: bidderId
          in: path
          description: id of bidder to get favorite lots from
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: id of a lot to add to Favourites
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Adds a lot to Favourites of a specific bidder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lot'
        '400':
          description: Invalid bidderID.
        '404':
          description: Lot not found
    delete:
      tags:
        - favorites
      summary: Removes a lot from Favourites.
      description: Removes a lot from Favourites of a specific bidder.
      operationId: removeBidderFavoritesLots
      parameters:
        - name: bidderId
          in: path
          description: id of bidder to remove favorite lot from
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: id of a lot to remove from Favourites
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Removes a lot from Favourites of a specific bidder.
        '400':
          description: Invalid bidderID.
        '404':
          description: Lot not found

# working with balance
   /bidder/{bidderId}/balance:
    get:
      tags:
        - balance
      summary: Get bidder balance
      description: Get a specified account balance by given bidder Id
      operationId: getBidderBalance
      parameters:
        - name: bidderId
          in: path
          description: id of bidder to get a balance of
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Balance'
        '400':
          description: Invalid resource supplied

   /bidder/{bidderId}/withdraw/{amount}:
    put:
      tags:
        - balance
      summary: Withdraw money
      description: Withdraw funds from a specified bidder
      operationId: withdrawMoney
      parameters:
        - name: bidderId
          in: path
          description: id of bidder to get a balance of
          required: true
          schema:
            type: integer
            format: int64
        - name: amount
          in: path
          required: true
          schema:
            type: number
            format: double
      responses:
        '400':
          description: Invalid resource supplied
        '404':
          description: The requested resource cannot be found
        '500':
          description: The server encountered an unexpected condition

   /bidder/{bidderId}/replenish/{amount}:
    put:
      tags:
        - balance
      summary: Replenish money
      description: replenish money of a specified bidder
      operationId: replenishMoney
      parameters:
        - name: bidderId
          in: path
          description: id of bidder to get a balance of
          required: true
          schema:
            type: integer
            format: int64
        - name: amount
          in: path
          required: true
          schema:
            type: number
            format: double
      responses:
        '400':
          description: Invalid resource supplied
        '404':
          description: The requested resource cannot be found
        '500':
          description: The server encountered an unexpected condition     

# working with bids
   /auctions/{id}/bids:
    post:
      tags:
        - bids
      summary: Place bid on a lot
      description: Place a new bid for the specified lot in the auction with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the auction to place bid
          required: true
          type: integer
        - name: bid
          in: body
          description: Details of the bid
          required: true
          schema:
            $ref: "#/components/schemas/Bid"
      responses:
        "200":
          description: Successfully placed bid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bid"
        "400":
          description: Bad Request. One or more of the request parameters is invalid.
        "401":
          description: Unauthorized. Authentication credentials were missing or incorrect.
        "404":
          description: Not Found. The specified resource could not be found.
        "500":
          description: Internal Server Error. An error occurred on the server while processing the request.

   /auctions/{id}/last_bid_price:
    get:
      tags:
        - bids
      summary: Get last bid price of a lot
      description: Retrieves the price of the last bid for the specified lot in the auction with the given ID
      parameters:
        - name: id
          in: path
          description: ID of the auction to retrieve last bid price
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully retrieved last bid price
          content:
            application/json:
              schema:
                type: object
                properties:
                  last_bid_price:
                    type: number
                    format: double
                    example: 350.5
                required:
                  - last_bid_price
        "404":
          description: Not Found. The specified resource could not be found.
        "500":
          description: Internal Server Error. An error occurred on the server while processing the request.

# notifications
   /notification/{id}/lotSold:
    post:
      tags:
        - notifications
      summary: Notify auctioneer of lot sold
      description: Notifies the auctioneer that the specified lot in the auction with the given ID has been sold
      parameters:
        - name: id
          in: path
          description: ID of the auction to notify of lot sold
          required: true
          schema:
            type: integer
        - name: lot
          in: body
          description: Details of the lot
          required: true
          schema:
            $ref: "#/components/schemas/Lot"
      responses:
        "200":
          description: Successfully notified auctioneer of lot sold
        "404":
          description: Not Found. The specified resource could not be found.
        "500":
          description: Internal Server Error. An error occurred on the server while processing the request.

   /notification/{id}/bidWon:
      post:    
        tags:
          - notifications
        summary: Notify winning bidder
        description: Notifies the winning bidder of the specified lot in the auction with the given ID that they have won the lot
        parameters:
          - name: id
            in: path
            description: ID of the auction to notify winning bidder
            required: true
            schema:
              type: integer
          - name: bidder
            in: body
            description: Details of the winning bidder
            required: true
            schema:
              $ref: "#/components/schemas/User"
        responses:
          "200":
            description: Successfully notified winning bidder
          "400":
            description: Bad Request. One or more of the request parameters is invalid.
          "401":
            description: Unauthorized. Authentication credentials were missing or incorrect.
          "404":
            description: Not Found. The specified resource could not be found.
          "500":
            description: Internal Server Error. An error occurred on the server while processing the request.

         
components:
  schemas:
    Lot:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Vase
        price:
          type: number
          format: double
          example: 350.5
        isFavourite:
          type: boolean
          description: is in Favourite List?
          example: 1
        status:
          type: string
          description: Lot Status
          example: sold
          enum:
            - placed
            - active
            - sold
   
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theAuctioneer
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userType:
          type: string
          description: User Type
          example: auctioneer
          enum:
            - auctioneer
            - bidder
        lots:
          type: array
          items:
            $ref: '#/components/schemas/Lot'
    
    Balance: 
      type: object
      properties:
        user:
          type: object
          $ref: '#/components/schemas/User'
        balance:
          type: number
          format: double
          example: 100.5
        currencyCode:
          type: string
    
    Bid:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        bidder:
          $ref: "#/components/schemas/User"
          description: The bidder who placed the bid
        lot:
          $ref: "#/components/schemas/Lot"
          description: The lot for which the bid was placed
        bid_price:
          type: number
          format: double
          example: 350.5
          minimum: 0
        created_at:
          type: string
          format: date-time
          description: The date and time when the bid was placed
